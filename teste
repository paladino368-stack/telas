import pandas as pd
import os
from difflib import SequenceMatcher
from typing import Tuple

def _carregar_dataframe(caminho_arquivo: str) -> pd.DataFrame:
    """Fun√ß√£o auxiliar para carregar um arquivo CSV ou Excel em um DataFrame."""
    print(f"üîÑ Carregando arquivo: {os.path.basename(caminho_arquivo)}...")
    try:
        if caminho_arquivo.lower().endswith('.csv'):
            return pd.read_csv(caminho_arquivo)
        elif caminho_arquivo.lower().endswith('.xlsx'):
            return pd.read_excel(caminho_arquivo)
        else:
            raise ValueError("Formato de arquivo n√£o suportado. Use .csv ou .xlsx")
    except FileNotFoundError:
        raise FileNotFoundError(f"ERRO: O arquivo '{caminho_arquivo}' n√£o foi encontrado.")
    except Exception as e:
        raise Exception(f"ERRO ao ler o arquivo '{caminho_arquivo}': {e}")

def analisador_de_similaridade(
    caminho_arquivo1: str,
    caminho_arquivo2: str,
    coluna_numerica_obrigatoria: str,
    peso_estrutura: float = 0.3,
    peso_conteudo: float = 0.7
) -> float:
    """
    Analisa dois arquivos tabulares e calcula um percentual de similaridade.

    A an√°lise √© baseada na estrutura (linhas/colunas) e no conte√∫do (c√©lula a c√©lula),
    com tratamento especial para uma coluna num√©rica de correspond√™ncia obrigat√≥ria.

    Args:
        caminho_arquivo1 (str): Caminho para o primeiro arquivo.
        caminho_arquivo2 (str): Caminho para o segundo arquivo.
        coluna_numerica_obrigatoria (str): Nome da coluna onde os n√∫meros devem ser id√™nticos.
        peso_estrutura (float): O peso da similaridade estrutural na pontua√ß√£o final (padr√£o 0.3).
        peso_conteudo (float): O peso da similaridade de conte√∫do na pontua√ß√£o final (padr√£o 0.7).

    Returns:
        float: O percentual final de similaridade entre os dois arquivos.
    """
    print("======================================================")
    print("üöÄ INICIANDO AN√ÅLISE DE SIMILARIDADE DE ARQUIVOS üöÄ")
    print("======================================================")

    try:
        df1 = _carregar_dataframe(caminho_arquivo1)
        df2 = _carregar_dataframe(caminho_arquivo2)
    except Exception as e:
        print(e)
        return 0.0

    # --- 1. AN√ÅLISE ESTRUTURAL ---
    print("\n---------- ETAPA 1: AN√ÅLISE ESTRUTURAL ----------")
    shape1 = df1.shape
    shape2 = df2.shape
    print(f"Dimens√µes Arquivo 1: {shape1[0]} linhas, {shape1[1]} colunas.")
    print(f"Dimens√µes Arquivo 2: {shape2[0]} linhas, {shape2[1]} colunas.")

    # Validar se a coluna obrigat√≥ria existe em ambos
    if coluna_numerica_obrigatoria not in df1.columns or coluna_numerica_obrigatoria not in df2.columns:
        print(f"‚ùå ERRO CR√çTICO: A coluna '{coluna_numerica_obrigatoria}' n√£o foi encontrada em ambos os arquivos.")
        return 0.0

    sim_linhas = min(shape1[0], shape2[0]) / max(shape1[0], shape2[0]) if max(shape1[0], shape2[0]) > 0 else 1.0
    sim_colunas = min(shape1[1], shape2[1]) / max(shape1[1], shape2[1]) if max(shape1[1], shape2[1]) > 0 else 1.0
    
    score_estrutura = (sim_linhas + sim_colunas) / 2
    print(f"Similaridade de Linhas: {sim_linhas:.2%}")
    print(f"Similaridade de Colunas: {sim_colunas:.2%}")
    print(f"üìä Pontua√ß√£o de Similaridade Estrutural: {score_estrutura:.2%}")

    # --- 2. AN√ÅLISE DE CONTE√öDO ---
    print("\n---------- ETAPA 2: AN√ÅLISE DE CONTE√öDO ----------")
    print(f"Verificando correspond√™ncia exata na coluna: '{coluna_numerica_obrigatoria}'")
    print("Calculando similaridade de texto para as demais colunas...")

    scores_celulas = []
    # Usar o menor n√∫mero de linhas e colunas para evitar erros de √≠ndice
    linhas_para_comparar = min(shape1[0], shape2[0])
    colunas_para_comparar = min(shape1[1], shape2[1])

    if linhas_para_comparar == 0 or colunas_para_comparar == 0:
        score_conteudo = 0.0
    else:
        for i in range(linhas_para_comparar):
            for j in range(colunas_para_comparar):
                coluna_atual = df1.columns[j]
                val1 = df1.iloc[i, j]
                val2 = df2.iloc[i, j]

                # Tratar valores nulos/vazios para evitar erros
                s_val1 = str(val1) if pd.notna(val1) else ""
                s_val2 = str(val2) if pd.notna(val2) else ""

                if coluna_atual == coluna_numerica_obrigatoria:
                    # Compara√ß√£o exata para a coluna num√©rica chave
                    score_celula = 1.0 if s_val1 == s_val2 else 0.0
                else:
                    # Compara√ß√£o de similaridade de texto para outras colunas
                    score_celula = SequenceMatcher(None, s_val1, s_val2).ratio()
                
                scores_celulas.append(score_celula)
        
        score_conteudo = sum(scores_celulas) / len(scores_celulas) if scores_celulas else 1.0

    print(f"üìù Pontua√ß√£o de Similaridade de Conte√∫do: {score_conteudo:.2%}")

    # --- 3. C√ÅLCULO FINAL ---
    print("\n---------- ETAPA 3: C√ÅLCULO FINAL PONDERADO ----------")
    print(f"Pesos aplicados -> Estrutura: {peso_estrutura:.0%}, Conte√∫do: {peso_conteudo:.0%}")
    
    similaridade_final = (score_estrutura * peso_estrutura) + (score_conteudo * peso_conteudo)
    
    print("\n======================================================")
    print(f"üèÜ SIMILARIDADE FINAL CALCULADA: {similaridade_final:.2%}")
    print("======================================================")
    
    return similaridade_final

### Exemplo de Uso Pr√°tico

Vamos criar dois arquivos CSV de exemplo para testar a fun√ß√£o.

```python
# --- PREPARA√á√ÉO DO AMBIENTE DE TESTE ---

# Arquivo 1: A nossa base
dados_a = {
    'ID_VENDA': [1001, 1002, 1003, 1004],
    'CLIENTE': ['Tech Solutions Ltda', 'Inova Corp', 'Mercado Central', 'Papelaria Folha Branca'],
    'DESCRICAO': ['Compra de 10x monitores LED 24"', 'Servi√ßo de consultoria em TI', 'Aquisi√ß√£o de 50x teclados ABNT2', 'Pacote com 1000 folhas A4'],
    'VALOR': [5000.00, 3500.00, 1500.00, 250.00]
}
df_a = pd.DataFrame(dados_a)
df_a.to_csv("vendas_mes_1.csv", index=False)

# Arquivo 2: Vers√£o com pequenas diferen√ßas
dados_b = {
    'ID_VENDA': [1001, 1002, 1003, 1005], # ID 1004 alterado para 1005
    'CLIENTE': ['Tech Solutions LTDA', 'Inova Corp', 'Mercado Central', 'Distribuidora Papel Total'], # 'Ltda' -> 'LTDA', um cliente mudou
    'DESCRICAO': ['Compra de 10 monitores de LED 24 polegadas', 'Servi√ßo de consultoria em TI', 'Aquisi√ß√£o de 50 teclados ABNT 2', 'Pacote com 500 folhas A4'], # Textos levemente alterados
    'VALOR': [5000.00, 3500.00, 1500.00, 125.00]
}
df_b = pd.DataFrame(dados_b)
df_b.to_csv("vendas_mes_2.csv", index=False)

# --- EXECU√á√ÉO DA AN√ÅLISE ---
# Apontamento manual dos arquivos e da coluna chave
arquivo1 = "vendas_mes_1.csv"
arquivo2 = "vendas_mes_2.csv"
coluna_chave = "ID_VENDA"

similaridade = analisador_de_similaridade(arquivo1, arquivo2, coluna_chave)

# --- LIMPEZA DO AMBIENTE ---
os.remove(arquivo1)
os.remove(arquivo2)
