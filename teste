import pandas as pd
import os
from difflib import SequenceMatcher
from typing import Any

def _carregar_dataframe(caminho_arquivo: str, sheet_name: Any = 0) -> pd.DataFrame:
    """
    Carrega dinamicamente um arquivo (CSV ou Excel) em um DataFrame do Pandas.
    Para Excel, permite a especificação da planilha.
    """
    extensao = os.path.splitext(caminho_arquivo)[1].lower()
    print(f"\n🔄 Carregando arquivo: '{os.path.basename(caminho_arquivo)}' (extensão: {extensao})")

    try:
        if extensao == '.csv':
            return pd.read_csv(caminho_arquivo, low_memory=False)
        elif extensao == '.xlsx':
            return pd.read_excel(caminho_arquivo, sheet_name=sheet_name)
        else:
            raise ValueError(f"Extensão '{extensao}' não suportada. Use .csv ou .xlsx")
    except FileNotFoundError:
        raise FileNotFoundError(f"ERRO: O arquivo '{caminho_arquivo}' não foi encontrado.")
    except Exception as e:
        raise Exception(f"ERRO ao ler o arquivo '{caminho_arquivo}': {e}")

def comparador_avancado_arquivos(
    caminho_arquivo1: str,
    caminho_arquivo2: str,
    sheet1: Any = 0,
    sheet2: Any = 0,
    peso_estrutura: float = 0.3,
    peso_colunas: float = 0.4,
    peso_conteudo: float = 0.3
) -> float:
    """
    Compara de forma avançada e totalmente automática a similaridade entre dois arquivos.

    A análise é baseada em três pilares com pesos ajustáveis:
    1.  **Estrutura:** Compara a quantidade de linhas e colunas.
    2.  **Nomes das Colunas:** Verifica se o conjunto de colunas é idêntico.
    3.  **Conteúdo:** Compara célula a célula o conteúdo das colunas em comum.

    Args:
        caminho_arquivo1 (str): Caminho completo para o primeiro arquivo.
        caminho_arquivo2 (str): Caminho completo para o segundo arquivo.
        sheet1 (Any): Planilha a ser lida no primeiro arquivo, se for .xlsx (padrão 0).
        sheet2 (Any): Planilha a ser lida no segundo arquivo, se for .xlsx (padrão 0).
        peso_estrutura (float): Peso da similaridade estrutural (padrão 0.3).
        peso_colunas (float): Peso da similaridade dos nomes das colunas (padrão 0.4).
        peso_conteudo (float): Peso da similaridade do conteúdo (padrão 0.3).

    Returns:
        float: O percentual final de similaridade entre os dois arquivos.
    """
    print("======================================================")
    print("🚀 INICIANDO COMPARADOR AVANÇADO DE ARQUIVOS 🚀")
    print("======================================================")
    
    try:
        df1 = _carregar_dataframe(caminho_arquivo1, sheet_name=sheet1)
        df2 = _carregar_dataframe(caminho_arquivo2, sheet_name=sheet2)
    except (ValueError, FileNotFoundError, Exception) as e:
        print(f"\n❌ A análise foi interrompida devido a um erro de carregamento: {e}")
        return 0.0

    # --- 1. ANÁLISE ESTRUTURAL (DIMENSÕES) ---
    print("\n---------- ETAPA 1: ANÁLISE ESTRUTURAL (DIMENSÕES) ----------")
    shape1 = df1.shape
    shape2 = df2.shape
    print(f"Dimensões Arquivo 1: {shape1[0]} linhas, {shape1[1]} colunas.")
    print(f"Dimensões Arquivo 2: {shape2[0]} linhas, {shape2[1]} colunas.")
    
    sim_linhas = min(shape1[0], shape2[0]) / max(shape1[0], shape2[0]) if max(shape1[0], shape2[0]) > 0 else 1.0
    sim_colunas_total = min(shape1[1], shape2[1]) / max(shape1[1], shape2[1]) if max(shape1[1], shape2[1]) > 0 else 1.0
    score_estrutura = (sim_linhas + sim_colunas_total) / 2
    print(f"📊 Pontuação de Similaridade Estrutural: {score_estrutura:.2%}")

    # --- 2. ANÁLISE DOS NOMES DAS COLUNAS ---
    print("\n---------- ETAPA 2: ANÁLISE DOS NOMES DAS COLUNAS ----------")
    cols1 = set(df1.columns)
    cols2 = set(df2.columns)
    
    if cols1 == cols2:
        print("✅ Sucesso! Os nomes das colunas são idênticos em ambos os arquivos.")
        score_colunas = 1.0
    else:
        print("⚠️ Atenção! Os nomes das colunas são diferentes.")
        intersecao = len(cols1.intersection(cols2))
        uniao = len(cols1.union(cols2))
        score_colunas = intersecao / uniao if uniao > 0 else 0.0
        print(f"   Colunas apenas no Arquivo 1: {sorted(list(cols1 - cols2))}")
        print(f"   Colunas apenas no Arquivo 2: {sorted(list(cols2 - cols1))}")
    
    print(f"📊 Pontuação de Similaridade de Colunas: {score_colunas:.2%}")

    # --- 3. ANÁLISE DE CONTEÚDO ---
    print("\n---------- ETAPA 3: ANÁLISE DE CONTEÚDO (CÉLULA A CÉLULA) ----------")
    colunas_comuns = sorted(list(cols1.intersection(cols2)))
    score_conteudo = 0.0

    if not colunas_comuns:
        print(" Sem colunas em comum, a comparação de conteúdo não é possível.")
    else:
        print(f"Comparando o conteúdo das {len(colunas_comuns)} colunas em comum...")
        df1_comp = df1[colunas_comuns]
        df2_comp = df2[colunas_comuns]
        
        scores_celulas = []
        linhas_para_comparar = min(len(df1_comp), len(df2_comp))
        
        if linhas_para_comparar > 0:
            for i in range(linhas_para_comparar):
                for col in colunas_comuns:
                    val1 = df1_comp.at[i, col]
                    val2 = df2_comp.at[i, col]
                    s_val1 = str(val1) if pd.notna(val1) else ""
                    s_val2 = str(val2) if pd.notna(val2) else ""
                    
                    # Usa similaridade de texto para todas as colunas
                    score_celula = SequenceMatcher(None, s_val1, s_val2).ratio()
                    scores_celulas.append(score_celula)
            
            if scores_celulas:
                score_conteudo = sum(scores_celulas) / len(scores_celulas)

    print(f"📝 Pontuação de Similaridade de Conteúdo: {score_conteudo:.2%}")

    # --- 4. CÁLCULO FINAL PONDERADO ---
    print("\n---------- ETAPA 4: CÁLCULO FINAL PONDERADO ----------")
    print(f"Pesos aplicados -> Estrutura: {peso_estrutura:.0%}, Nomes Colunas: {peso_colunas:.0%}, Conteúdo: {peso_conteudo:.0%}")
    
    similaridade_final = (score_estrutura * peso_estrutura) + \
                         (score_colunas * peso_colunas) + \
                         (score_conteudo * peso_conteudo)
    
    print("\n======================================================")
    print(f"🏆 SIMILARIDADE FINAL CALCULADA: {similaridade_final:.2%}")
    print("======================================================")
    
    return similaridade_final
